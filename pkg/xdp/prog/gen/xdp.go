// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package gen generated by go-bindata.// sources:
// pkg/xdp/prog/obj/.gitkeep
// pkg/xdp/prog/obj/xdp.o
package gen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _Gitkeep = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func GitkeepBytes() ([]byte, error) {
	return bindataRead(
		_Gitkeep,
		".gitkeep",
	)
}

func Gitkeep() (*asset, error) {
	bytes, err := GitkeepBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".gitkeep", size: 0, mode: os.FileMode(420), modTime: time.Unix(1598204788, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _xdpO = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x54\xcf\x8b\xd3\x40\x14\xfe\x92\x89\xbb\x15\x77\x35\x6e\xb7\xb2\xec\x41\x16\xf6\xea\xa6\x0b\xa2\xe8\x45\x6a\xd5\xaa\xd0\xa2\x87\x8a\x82\x87\x90\xb6\xb1\x06\xa7\x1a\x9b\x08\xf1\x24\x1e\x14\x8f\x5e\x04\x8f\xe2\xa9\xff\x41\xbd\xf5\x2f\xf1\xef\xd0\x43\x21\x92\x99\x97\xb6\xbe\xb4\xd5\xfb\x3e\x98\xf9\xfa\xbe\xbe\x5f\xf3\x0d\x93\x77\x77\x9a\x0d\xd3\x30\x90\x9b\x81\x5f\x98\x7b\x73\xfb\x21\xe6\xbf\x6b\xb4\x97\x60\x60\x4c\x9c\xb7\x63\x69\x3c\xaf\xfd\x49\x59\xe3\xa6\x00\xce\x02\x38\x3a\x3c\x50\xfe\xeb\xdd\x2d\x8d\xe5\x6d\x85\x7d\x01\x94\x00\x3c\xb8\xa5\xe3\x2b\xc2\xc4\xa7\x11\x30\xb6\x74\xde\x23\xb1\x81\xf7\xac\xde\x0e\x30\xeb\x7b\x74\x58\x51\x98\xc5\x67\x7c\x50\xb6\xb5\x0f\xc0\x04\xf0\x58\x00\x69\x9a\xd5\xb5\xf1\xf1\x27\x70\xee\x66\x71\xbe\xdd\xbf\xea\x9d\xa1\x73\xe8\x39\xbb\xfb\xd3\x54\xc5\x7f\xa7\x78\x13\x98\xa6\x69\xba\xc7\x44\xfa\xa0\xb4\x03\x26\xc4\xe7\xfd\x2b\xa4\xed\x98\xfe\xff\x32\xd3\x19\xb0\x68\xe5\x8a\x66\xf1\x7d\xf9\xaa\xe3\xc9\x68\xc9\x0d\x9c\x0c\xbb\xfd\xc6\x93\x07\xad\xfb\xed\xea\xdd\x87\xcd\x75\x71\x6d\xb5\x0b\x3c\x67\x7c\x8b\xf8\xaf\x8c\x6f\x10\x7f\xcc\xee\xed\x12\x00\x1b\x1b\x85\xfa\x5b\x8a\x3f\x55\xe0\x2f\x2a\x5e\x14\xf8\xdf\x84\x59\x79\x95\xe5\xc4\x7e\x12\x63\xe0\x85\x51\xb5\x23\xbd\xee\x0b\x19\x44\x31\x9c\xa1\x2f\x93\x5e\x58\x4d\x7a\xa1\x1b\x84\xee\xb3\x40\xc6\xfe\x10\xae\x2b\x83\xae\xff\x32\xf2\xe1\x44\xf1\x30\xf6\x3a\x70\xa2\xb7\x83\x0c\x9b\xf5\xfa\xb1\x7b\x5d\xc3\x15\x0d\x97\xd7\xa9\xf2\xff\x76\x55\xa9\x51\xb4\x27\x44\x3e\x65\x3c\xff\x26\x18\xb4\xb8\x72\xb5\x15\xfd\x2c\xe6\xef\xff\x23\xff\x1a\x6b\x58\x62\x71\x17\x00\x9c\x5e\xd2\xe7\x1e\xcd\x6f\x93\xbf\x49\xe7\xcc\xf3\x17\x79\x63\x89\x06\x09\xf5\xe5\xef\x9b\xcf\xef\xac\xc8\xff\x6c\x6a\xdc\x66\x3c\xd7\xef\x06\xbd\x77\x6e\xdf\x88\x1c\x2d\xe4\x59\x0b\xf3\xef\x11\xfe\x09\x00\x00\xff\xff\xa2\x0f\x67\x4a\xb8\x05\x00\x00")

func xdpOBytes() ([]byte, error) {
	return bindataRead(
		_xdpO,
		"xdp.o",
	)
}

func xdpO() (*asset, error) {
	bytes, err := xdpOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "xdp.o", size: 1464, mode: os.FileMode(420), modTime: time.Unix(1598206208, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	".gitkeep": Gitkeep,
	"xdp.o":    xdpO,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	".gitkeep": &bintree{Gitkeep, map[string]*bintree{}},
	"xdp.o":    &bintree{xdpO, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
